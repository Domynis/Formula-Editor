[
  {
    "name": "abs",
    "category": "Arithmetic",
    "syntax": [
      "abs(x)"
    ],
    "description": "Compute the absolute value.",
    "examples": [
      "abs(3.5)",
      "abs(-4.2)"
    ],
    "seealso": [
      "sign"
    ]
  },
  {
    "name": "acos",
    "category": "Trigonometry",
    "syntax": [
      "acos(x)"
    ],
    "description": "Compute the inverse cosine of a value in radians.",
    "examples": [
      "acos(0.5)",
      "acos(cos(2.3))"
    ],
    "seealso": [
      "cos",
      "atan",
      "asin"
    ]
  },
  {
    "name": "acosh",
    "category": "Trigonometry",
    "syntax": [
      "acosh(x)"
    ],
    "description": "Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",
    "examples": [
      "acosh(1.5)"
    ],
    "seealso": [
      "cosh",
      "asinh",
      "atanh"
    ]
  },
  {
    "name": "acot",
    "category": "Trigonometry",
    "syntax": [
      "acot(x)"
    ],
    "description": "Calculate the inverse cotangent of a value.",
    "examples": [
      "acot(0.5)",
      "acot(cot(0.5))",
      "acot(2)"
    ],
    "seealso": [
      "cot",
      "atan"
    ]
  },
  {
    "name": "acoth",
    "category": "Trigonometry",
    "syntax": [
      "acoth(x)"
    ],
    "description": "Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",
    "examples": [
      "acoth(2)",
      "acoth(0.5)"
    ],
    "seealso": [
      "acsch",
      "asech"
    ]
  },
  {
    "name": "acsc",
    "category": "Trigonometry",
    "syntax": [
      "acsc(x)"
    ],
    "description": "Calculate the inverse cotangent of a value.",
    "examples": [
      "acsc(2)",
      "acsc(csc(0.5))",
      "acsc(0.5)"
    ],
    "seealso": [
      "csc",
      "asin",
      "asec"
    ]
  },
  {
    "name": "acsch",
    "category": "Trigonometry",
    "syntax": [
      "acsch(x)"
    ],
    "description": "Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",
    "examples": [
      "acsch(0.5)"
    ],
    "seealso": [
      "asech",
      "acoth"
    ]
  },
  {
    "name": "add",
    "category": "Operators",
    "syntax": [
      "x + y",
      "add(x, y)"
    ],
    "description": "Add two values.",
    "examples": [
      "a = 2.1 + 3.6",
      "a - 3.6",
      "3 + 2i",
      "3 cm + 2 inch",
      "\"2.3\" + \"4\""
    ],
    "seealso": [
      "subtract"
    ]
  },
  {
    "name": "and",
    "category": "Logical",
    "syntax": [
      "x and y",
      "and(x, y)"
    ],
    "description": "Logical and. Test whether two values are both defined with a nonzero/nonempty value.",
    "examples": [
      "true and false",
      "true and true",
      "2 and 4"
    ],
    "seealso": [
      "not",
      "or",
      "xor"
    ]
  },
  {
    "name": "arg",
    "category": "Complex",
    "syntax": [
      "arg(x)"
    ],
    "description": "Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",
    "examples": [
      "arg(2 + 2i)",
      "atan2(3, 2)",
      "arg(2 + 3i)"
    ],
    "seealso": [
      "re",
      "im",
      "conj",
      "abs"
    ]
  },
  {
    "name": "asec",
    "category": "Trigonometry",
    "syntax": [
      "asec(x)"
    ],
    "description": "Calculate the inverse secant of a value.",
    "examples": [
      "asec(0.5)",
      "asec(sec(0.5))",
      "asec(2)"
    ],
    "seealso": [
      "acos",
      "acot",
      "acsc"
    ]
  },
  {
    "name": "asech",
    "category": "Trigonometry",
    "syntax": [
      "asech(x)"
    ],
    "description": "Calculate the inverse secant of a value.",
    "examples": [
      "asech(0.5)"
    ],
    "seealso": [
      "acsch",
      "acoth"
    ]
  },
  {
    "name": "asin",
    "category": "Trigonometry",
    "syntax": [
      "asin(x)"
    ],
    "description": "Compute the inverse sine of a value in radians.",
    "examples": [
      "asin(0.5)",
      "asin(sin(0.5))"
    ],
    "seealso": [
      "sin",
      "acos",
      "atan"
    ]
  },
  {
    "name": "asinh",
    "category": "Trigonometry",
    "syntax": [
      "asinh(x)"
    ],
    "description": "Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",
    "examples": [
      "asinh(0.5)"
    ],
    "seealso": [
      "acosh",
      "atanh"
    ]
  },
  {
    "name": "atan",
    "category": "Trigonometry",
    "syntax": [
      "atan(x)"
    ],
    "description": "Compute the inverse tangent of a value in radians.",
    "examples": [
      "atan(0.5)",
      "atan(tan(0.5))"
    ],
    "seealso": [
      "tan",
      "acos",
      "asin"
    ]
  },
  {
    "name": "atan2",
    "category": "Trigonometry",
    "syntax": [
      "atan2(y, x)"
    ],
    "description": "Computes the principal value of the arc tangent of y/x in radians.",
    "examples": [
      "atan2(2, 2) / pi",
      "angle = 60 deg in rad",
      "x = cos(angle)",
      "y = sin(angle)",
      "atan2(y, x)"
    ],
    "seealso": [
      "sin",
      "cos",
      "tan"
    ]
  },
  {
    "name": "atanh",
    "category": "Trigonometry",
    "syntax": [
      "atanh(x)"
    ],
    "description": "Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",
    "examples": [
      "atanh(0.5)"
    ],
    "seealso": [
      "acosh",
      "asinh"
    ]
  },
  {
    "name": "bellNumbers",
    "category": "Combinatorics",
    "syntax": [
      "bellNumbers(n)"
    ],
    "description": "The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",
    "examples": [
      "bellNumbers(3)",
      "bellNumbers(8)"
    ],
    "seealso": [
      "stirlingS2"
    ]
  },
  {
    "name": "bignumber",
    "category": "Construction",
    "syntax": [
      "bignumber(x)"
    ],
    "description": "Create a big number from a number or string.",
    "examples": [
      "0.1 + 0.2",
      "bignumber(0.1) + bignumber(0.2)",
      "bignumber(\"7.2\")",
      "bignumber(\"7.2e500\")",
      "bignumber([0.1, 0.2, 0.3])"
    ],
    "seealso": [
      "boolean",
      "complex",
      "fraction",
      "index",
      "matrix",
      "string",
      "unit"
    ]
  },
  {
    "name": "bin",
    "category": "Utils",
    "syntax": [
      "bin(value)"
    ],
    "description": "Format a number as binary",
    "examples": [
      "bin(2)"
    ],
    "seealso": [
      "oct",
      "hex"
    ]
  },
  {
    "name": "bitAnd",
    "category": "Bitwise",
    "syntax": [
      "x & y",
      "bitAnd(x, y)"
    ],
    "description": "Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",
    "examples": [
      "5 & 3",
      "bitAnd(53, 131)",
      "[1, 12, 31] & 42"
    ],
    "seealso": [
      "bitNot",
      "bitOr",
      "bitXor",
      "leftShift",
      "rightArithShift",
      "rightLogShift"
    ]
  },
  {
    "name": "bitNot",
    "category": "Bitwise",
    "syntax": [
      "~x",
      "bitNot(x)"
    ],
    "description": "Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",
    "examples": [
      "~1",
      "~2",
      "bitNot([2, -3, 4])"
    ],
    "seealso": [
      "bitAnd",
      "bitOr",
      "bitXor",
      "leftShift",
      "rightArithShift",
      "rightLogShift"
    ]
  },
  {
    "name": "bitOr",
    "category": "Bitwise",
    "syntax": [
      "x | y",
      "bitOr(x, y)"
    ],
    "description": "Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",
    "examples": [
      "5 | 3",
      "bitOr([1, 2, 3], 4)"
    ],
    "seealso": [
      "bitAnd",
      "bitNot",
      "bitXor",
      "leftShift",
      "rightArithShift",
      "rightLogShift"
    ]
  },
  {
    "name": "bitXor",
    "category": "Bitwise",
    "syntax": [
      "bitXor(x, y)"
    ],
    "description": "Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",
    "examples": [
      "bitOr(1, 2)",
      "bitXor([2, 3, 4], 4)"
    ],
    "seealso": [
      "bitAnd",
      "bitNot",
      "bitOr",
      "leftShift",
      "rightArithShift",
      "rightLogShift"
    ]
  },
  {
    "name": "boolean",
    "category": "Construction",
    "syntax": [
      "x",
      "boolean(x)"
    ],
    "description": "Convert a string or number into a boolean.",
    "examples": [
      "boolean(0)",
      "boolean(1)",
      "boolean(3)",
      "boolean(\"true\")",
      "boolean(\"false\")",
      "boolean([1, 0, 1, 1])"
    ],
    "seealso": [
      "bignumber",
      "complex",
      "index",
      "matrix",
      "number",
      "string",
      "unit"
    ]
  },
  {
    "name": "catalan",
    "category": "Combinatorics",
    "syntax": [
      "catalan(n)"
    ],
    "description": "The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",
    "examples": [
      "catalan(3)",
      "catalan(8)"
    ],
    "seealso": [
      "bellNumbers"
    ]
  },
  {
    "name": "cbrt",
    "category": "Arithmetic",
    "syntax": [
      "cbrt(x)",
      "cbrt(x, allRoots)"
    ],
    "description": "Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",
    "examples": [
      "cbrt(64)",
      "cube(4)",
      "cbrt(-8)",
      "cbrt(2 + 3i)",
      "cbrt(8i)",
      "cbrt(8i, true)",
      "cbrt(27 m^3)"
    ],
    "seealso": [
      "square",
      "sqrt",
      "cube",
      "multiply"
    ]
  },
  {
    "name": "ceil",
    "category": "Arithmetic",
    "syntax": [
      "ceil(x)"
    ],
    "description": "Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",
    "examples": [
      "ceil(3.2)",
      "ceil(3.8)",
      "ceil(-4.2)"
    ],
    "seealso": [
      "floor",
      "fix",
      "round"
    ]
  },
  {
    "name": "clone",
    "category": "Utils",
    "syntax": [
      "clone(x)"
    ],
    "description": "Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",
    "examples": [
      "clone(3.5)",
      "clone(2 - 4i)",
      "clone(45 deg)",
      "clone([1, 2; 3, 4])",
      "clone(\"hello world\")"
    ],
    "seealso": []
  },
  {
    "name": "column",
    "category": "Matrix",
    "syntax": [
      "column(x, index)"
    ],
    "description": "Return a column from a matrix or array.",
    "examples": [
      "A = [[1, 2], [3, 4]]",
      "column(A, 1)",
      "column(A, 2)"
    ],
    "seealso": [
      "row",
      "matrixFromColumns"
    ]
  },
  {
    "name": "combinations",
    "category": "Probability",
    "syntax": [
      "combinations(n, k)"
    ],
    "description": "Compute the number of combinations of n items taken k at a time",
    "examples": [
      "combinations(7, 5)"
    ],
    "seealso": [
      "combinationsWithRep",
      "permutations",
      "factorial"
    ]
  },
  {
    "name": "combinationsWithRep",
    "category": "Probability",
    "syntax": [
      "combinationsWithRep(n, k)"
    ],
    "description": "Compute the number of combinations of n items taken k at a time with replacements.",
    "examples": [
      "combinationsWithRep(7, 5)"
    ],
    "seealso": [
      "combinations",
      "permutations",
      "factorial"
    ]
  },
  {
    "name": "compare",
    "category": "Relational",
    "syntax": [
      "compare(x, y)"
    ],
    "description": "Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    "examples": [
      "compare(2, 3)",
      "compare(3, 2)",
      "compare(2, 2)",
      "compare(5cm, 40mm)",
      "compare(2, [1, 2, 3])"
    ],
    "seealso": [
      "equal",
      "unequal",
      "smaller",
      "smallerEq",
      "largerEq",
      "compareNatural",
      "compareText"
    ]
  },
  {
    "name": "compareNatural",
    "category": "Relational",
    "syntax": [
      "compareNatural(x, y)"
    ],
    "description": "Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    "examples": [
      "compareNatural(2, 3)",
      "compareNatural(3, 2)",
      "compareNatural(2, 2)",
      "compareNatural(5cm, 40mm)",
      "compareNatural(\"2\", \"10\")",
      "compareNatural(2 + 3i, 2 + 4i)",
      "compareNatural([1, 2, 4], [1, 2, 3])",
      "compareNatural([1, 5], [1, 2, 3])",
      "compareNatural([1, 2], [1, 2])",
      "compareNatural({a: 2}, {a: 4})"
    ],
    "seealso": [
      "equal",
      "unequal",
      "smaller",
      "smallerEq",
      "largerEq",
      "compare",
      "compareText"
    ]
  },
  {
    "name": "compareText",
    "category": "Relational",
    "syntax": [
      "compareText(x, y)"
    ],
    "description": "Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    "examples": [
      "compareText(\"B\", \"A\")",
      "compareText(\"A\", \"B\")",
      "compareText(\"A\", \"A\")",
      "compareText(\"2\", \"10\")",
      "compare(\"2\", \"10\")",
      "compare(2, 10)",
      "compareNatural(\"2\", \"10\")",
      "compareText(\"B\", [\"A\", \"B\", \"C\"])"
    ],
    "seealso": [
      "compare",
      "compareNatural"
    ]
  },
  {
    "name": "complex",
    "category": "Construction",
    "syntax": [
      "complex()",
      "complex(re, im)",
      "complex(string)"
    ],
    "description": "Create a complex number.",
    "examples": [
      "complex()",
      "complex(2, 3)",
      "complex(\"7 - 2i\")"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "index",
      "matrix",
      "number",
      "string",
      "unit"
    ]
  },
  {
    "name": "composition",
    "category": "Combinatorics",
    "syntax": [
      "composition(n, k)"
    ],
    "description": "The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",
    "examples": [
      "composition(5, 3)"
    ],
    "seealso": [
      "combinations"
    ]
  },
  {
    "name": "concat",
    "category": "Matrix",
    "syntax": [
      "concat(A, B, C, ...)",
      "concat(A, B, C, ..., dim)"
    ],
    "description": "Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",
    "examples": [
      "A = [1, 2; 5, 6]",
      "B = [3, 4; 7, 8]",
      "concat(A, B)",
      "concat(A, B, 1)",
      "concat(A, B, 2)"
    ],
    "seealso": [
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "conj",
    "category": "Complex",
    "syntax": [
      "conj(x)"
    ],
    "description": "Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",
    "examples": [
      "conj(2 + 3i)",
      "conj(2 - 3i)",
      "conj(-5.2i)"
    ],
    "seealso": [
      "re",
      "im",
      "abs",
      "arg"
    ]
  },
  {
    "name": "cos",
    "category": "Trigonometry",
    "syntax": [
      "cos(x)"
    ],
    "description": "Compute the cosine of x in radians.",
    "examples": [
      "cos(2)",
      "cos(pi / 4) ^ 2",
      "cos(180 deg)",
      "cos(60 deg)",
      "sin(0.2)^2 + cos(0.2)^2"
    ],
    "seealso": [
      "acos",
      "sin",
      "tan"
    ]
  },
  {
    "name": "cosh",
    "category": "Trigonometry",
    "syntax": [
      "cosh(x)"
    ],
    "description": "Compute the hyperbolic cosine of x in radians.",
    "examples": [
      "cosh(0.5)"
    ],
    "seealso": [
      "sinh",
      "tanh",
      "coth"
    ]
  },
  {
    "name": "cot",
    "category": "Trigonometry",
    "syntax": [
      "cot(x)"
    ],
    "description": "Compute the cotangent of x in radians. Defined as 1/tan(x)",
    "examples": [
      "cot(2)",
      "1 / tan(2)"
    ],
    "seealso": [
      "sec",
      "csc",
      "tan"
    ]
  },
  {
    "name": "coth",
    "category": "Trigonometry",
    "syntax": [
      "coth(x)"
    ],
    "description": "Compute the hyperbolic cotangent of x in radians.",
    "examples": [
      "coth(2)",
      "1 / tanh(2)"
    ],
    "seealso": [
      "sech",
      "csch",
      "tanh"
    ]
  },
  {
    "name": "count",
    "category": "Matrix",
    "syntax": [
      "count(x)"
    ],
    "description": "Count the number of elements of a matrix, array or string.",
    "examples": [
      "a = [1, 2; 3, 4; 5, 6]",
      "count(a)",
      "size(a)",
      "count(\"hello world\")"
    ],
    "seealso": [
      "size"
    ]
  },
  {
    "name": "createUnit",
    "category": "Construction",
    "syntax": [
      "createUnit(definitions)",
      "createUnit(name, definition)"
    ],
    "description": "Create a user-defined unit and register it with the Unit type.",
    "examples": [
      "createUnit(\"foo\")",
      "createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})",
      "createUnit(\"mph\", \"1 mile/hour\")"
    ],
    "seealso": [
      "unit",
      "splitUnit"
    ]
  },
  {
    "name": "cross",
    "category": "Matrix",
    "syntax": [
      "cross(A, B)"
    ],
    "description": "Calculate the cross product for two vectors in three dimensional space.",
    "examples": [
      "cross([1, 1, 0],  [0, 1, 1])",
      "cross([3, -3, 1], [4, 9, 2])",
      "cross([2, 3, 4],  [5, 6, 7])"
    ],
    "seealso": [
      "multiply",
      "dot"
    ]
  },
  {
    "name": "csc",
    "category": "Trigonometry",
    "syntax": [
      "csc(x)"
    ],
    "description": "Compute the cosecant of x in radians. Defined as 1/sin(x)",
    "examples": [
      "csc(2)",
      "1 / sin(2)"
    ],
    "seealso": [
      "sec",
      "cot",
      "sin"
    ]
  },
  {
    "name": "csch",
    "category": "Trigonometry",
    "syntax": [
      "csch(x)"
    ],
    "description": "Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",
    "examples": [
      "csch(2)",
      "1 / sinh(2)"
    ],
    "seealso": [
      "sech",
      "coth",
      "sinh"
    ]
  },
  {
    "name": "ctranspose",
    "category": "Matrix",
    "syntax": [
      "x'",
      "ctranspose(x)"
    ],
    "description": "Complex Conjugate and Transpose a matrix",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "a'",
      "ctranspose(a)"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "zeros"
    ]
  },
  {
    "name": "cube",
    "category": "Arithmetic",
    "syntax": [
      "cube(x)"
    ],
    "description": "Compute the cube of a value. The cube of x is x * x * x.",
    "examples": [
      "cube(2)",
      "2^3",
      "2 * 2 * 2"
    ],
    "seealso": [
      "multiply",
      "square",
      "pow"
    ]
  },
  {
    "name": "cumsum",
    "category": "Statistics",
    "syntax": [
      "cumsum(a, b, c, ...)",
      "cumsum(A)"
    ],
    "description": "Compute the cumulative sum of all values.",
    "examples": [
      "cumsum(2, 3, 4, 1)",
      "cumsum([2, 3, 4, 1])",
      "cumsum([1, 2; 3, 4])",
      "cumsum([1, 2; 3, 4], 1)",
      "cumsum([1, 2; 3, 4], 2)"
    ],
    "seealso": [
      "max",
      "mean",
      "median",
      "min",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "deepEqual",
    "category": "Relational",
    "syntax": [
      "deepEqual(x, y)"
    ],
    "description": "Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",
    "examples": [
      "deepEqual([1,3,4], [1,3,4])",
      "deepEqual([1,3,4], [1,3])"
    ],
    "seealso": [
      "equal",
      "unequal",
      "smaller",
      "larger",
      "smallerEq",
      "largerEq",
      "compare"
    ]
  },
  {
    "name": "det",
    "category": "Matrix",
    "syntax": [
      "det(x)"
    ],
    "description": "Calculate the determinant of a matrix",
    "examples": [
      "det([1, 2; 3, 4])",
      "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"
    ],
    "seealso": [
      "concat",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "diag",
    "category": "Matrix",
    "syntax": [
      "diag(x)",
      "diag(x, k)"
    ],
    "description": "Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",
    "examples": [
      "diag(1:3)",
      "diag(1:3, 1)",
      "a = [1, 2, 3; 4, 5, 6; 7, 8, 9]",
      "diag(a)"
    ],
    "seealso": [
      "concat",
      "det",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "diff",
    "category": "Matrix",
    "syntax": [
      "diff(arr)",
      "diff(arr, dim)"
    ],
    "description": [
      "Create a new matrix or array with the difference of the passed matrix or array.",
      "Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference",
      "If no dimension parameter is passed it is assumed as dimension 0",
      "Dimension is zero-based in javascript and one-based in the parser",
      "Arrays must be 'rectangular' meaning arrays like [1, 2]",
      "If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays"
    ],
    "examples": [
      "A = [1, 2, 4, 7, 0]",
      "diff(A)",
      "diff(A, 1)",
      "B = [[1, 2], [3, 4]]",
      "diff(B)",
      "diff(B, 1)",
      "diff(B, 2)",
      "diff(B, bignumber(2))",
      "diff([[1, 2], matrix([3, 4])], 2)"
    ],
    "seealso": [
      "subtract",
      "partitionSelect"
    ]
  },
  {
    "name": "distance",
    "category": "Geometry",
    "syntax": [
      "distance([x1, y1], [x2, y2])",
      "distance([[x1, y1], [x2, y2]])"
    ],
    "description": "Calculates the Euclidean distance between two points.",
    "examples": [
      "distance([0,0], [4,4])",
      "distance([[0,0], [4,4]])"
    ],
    "seealso": []
  },
  {
    "name": "divide",
    "category": "Operators",
    "syntax": [
      "x / y",
      "divide(x, y)"
    ],
    "description": "Divide two values.",
    "examples": [
      "a = 2 / 3",
      "a * 3",
      "4.5 / 2",
      "3 + 4 / 2",
      "(3 + 4) / 2",
      "18 km / 4.5"
    ],
    "seealso": [
      "multiply"
    ]
  },
  {
    "name": "dot",
    "category": "Matrix",
    "syntax": [
      "dot(A, B)",
      "A * B"
    ],
    "description": "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",
    "examples": [
      "dot([2, 4, 1], [2, 2, 3])",
      "[2, 4, 1] * [2, 2, 3]"
    ],
    "seealso": [
      "multiply",
      "cross"
    ]
  },
  {
    "name": "dotDivide",
    "category": "Operators",
    "syntax": [
      "x ./ y",
      "dotDivide(x, y)"
    ],
    "description": "Divide two values element wise.",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "b = [2, 1, 1; 3, 2, 5]",
      "a ./ b"
    ],
    "seealso": [
      "multiply",
      "dotMultiply",
      "divide"
    ]
  },
  {
    "name": "dotMultiply",
    "category": "Operators",
    "syntax": [
      "x .* y",
      "dotMultiply(x, y)"
    ],
    "description": "Multiply two values element wise.",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "b = [2, 1, 1; 3, 2, 5]",
      "a .* b"
    ],
    "seealso": [
      "multiply",
      "divide",
      "dotDivide"
    ]
  },
  {
    "name": "dotPow",
    "category": "Operators",
    "syntax": [
      "x .^ y",
      "dotPow(x, y)"
    ],
    "description": "Calculates the power of x to y element wise.",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "a .^ 2"
    ],
    "seealso": [
      "pow"
    ]
  },
  {
    "name": "eigs",
    "category": "Matrix",
    "syntax": [
      "eigs(x)"
    ],
    "description": "Calculate the eigenvalues and eigenvectors of a real symmetric matrix",
    "examples": [
      "eigs([[5, 2.3], [2.3, 1]])"
    ],
    "seealso": [
      "inv"
    ]
  },
  {
    "name": "equal",
    "category": "Relational",
    "syntax": [
      "x == y",
      "equal(x, y)"
    ],
    "description": "Check equality of two values. Returns true if the values are equal, and false if not.",
    "examples": [
      "2+2 == 3",
      "2+2 == 4",
      "a = 3.2",
      "b = 6-2.8",
      "a == b",
      "50cm == 0.5m"
    ],
    "seealso": [
      "unequal",
      "smaller",
      "larger",
      "smallerEq",
      "largerEq",
      "compare",
      "deepEqual",
      "equalText"
    ]
  },
  {
    "name": "equalText",
    "category": "Relational",
    "syntax": [
      "equalText(x, y)"
    ],
    "description": "Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.",
    "examples": [
      "equalText(\"Hello\", \"Hello\")",
      "equalText(\"a\", \"A\")",
      "equal(\"2e3\", \"2000\")",
      "equalText(\"2e3\", \"2000\")",
      "equalText(\"B\", [\"A\", \"B\", \"C\"])"
    ],
    "seealso": [
      "compare",
      "compareNatural",
      "compareText",
      "equal"
    ]
  },
  {
    "name": "erf",
    "category": "Special",
    "syntax": [
      "erf(x)"
    ],
    "description": "Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",
    "examples": [
      "erf(0.2)",
      "erf(-0.5)",
      "erf(4)"
    ],
    "seealso": []
  },
  {
    "name": "exp",
    "category": "Arithmetic",
    "syntax": [
      "exp(x)"
    ],
    "description": "Calculate the exponent of a value.",
    "examples": [
      "exp(1.3)",
      "e ^ 1.3",
      "log(exp(1.3))",
      "x = 2.4",
      "(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"
    ],
    "seealso": [
      "expm",
      "expm1",
      "pow",
      "log"
    ]
  },
  {
    "name": "expm",
    "category": "Arithmetic",
    "syntax": [
      "exp(x)"
    ],
    "description": "Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",
    "examples": [
      "expm([[0,2],[0,0]])"
    ],
    "seealso": [
      "exp"
    ]
  },
  {
    "name": "expm1",
    "category": "Arithmetic",
    "syntax": [
      "expm1(x)"
    ],
    "description": "Calculate the value of subtracting 1 from the exponential value.",
    "examples": [
      "expm1(2)",
      "pow(e, 2) - 1",
      "log(expm1(2) + 1)"
    ],
    "seealso": [
      "exp",
      "pow",
      "log"
    ]
  },
  {
    "name": "factorial",
    "category": "Probability",
    "syntax": [
      "n!",
      "factorial(n)"
    ],
    "description": "Compute the factorial of a value",
    "examples": [
      "5!",
      "5 * 4 * 3 * 2 * 1",
      "3!"
    ],
    "seealso": [
      "combinations",
      "combinationsWithRep",
      "permutations",
      "gamma"
    ]
  },
  {
    "name": "fft",
    "category": "Matrix",
    "syntax": [
      "fft(x)"
    ],
    "description": "Calculate N-dimensional fourier transform",
    "examples": [
      "fft([[1, 0], [1, 0]])"
    ],
    "seealso": [
      "ifft"
    ]
  },
  {
    "name": "filter",
    "category": "Matrix",
    "syntax": [
      "filter(x, test)"
    ],
    "description": "Filter items in a matrix.",
    "examples": [
      "isPositive(x) = x > 0",
      "filter([6, -2, -1, 4, 3], isPositive)",
      "filter([6, -2, 0, 1, 0], x != 0)"
    ],
    "seealso": [
      "sort",
      "map",
      "forEach"
    ]
  },
  {
    "name": "fix",
    "category": "Arithmetic",
    "syntax": [
      "fix(x)"
    ],
    "description": "Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",
    "examples": [
      "fix(3.2)",
      "fix(3.8)",
      "fix(-4.2)",
      "fix(-4.8)"
    ],
    "seealso": [
      "ceil",
      "floor",
      "round"
    ]
  },
  {
    "name": "flatten",
    "category": "Matrix",
    "syntax": [
      "flatten(x)"
    ],
    "description": "Flatten a multi dimensional matrix into a single dimensional matrix.",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "size(a)",
      "b = flatten(a)",
      "size(b)"
    ],
    "seealso": [
      "concat",
      "resize",
      "size",
      "squeeze"
    ]
  },
  {
    "name": "floor",
    "category": "Arithmetic",
    "syntax": [
      "floor(x)"
    ],
    "description": "Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",
    "examples": [
      "floor(3.2)",
      "floor(3.8)",
      "floor(-4.2)"
    ],
    "seealso": [
      "ceil",
      "fix",
      "round"
    ]
  },
  {
    "name": "forEach",
    "category": "Matrix",
    "syntax": [
      "forEach(x, callback)"
    ],
    "description": "Iterates over all elements of a matrix/array, and executes the given callback function.",
    "examples": [
      "numberOfPets = {}",
      "addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;",
      "forEach([\"Dog\",\"Cat\",\"Cat\"], addPet)",
      "numberOfPets"
    ],
    "seealso": [
      "map",
      "sort",
      "filter"
    ]
  },
  {
    "name": "format",
    "category": "Utils",
    "syntax": [
      "format(value)",
      "format(value, precision)"
    ],
    "description": "Format a value of any type as string.",
    "examples": [
      "format(2.3)",
      "format(3 - 4i)",
      "format([])",
      "format(pi, 3)"
    ],
    "seealso": [
      "print"
    ]
  },
  {
    "name": "fraction",
    "category": "Construction",
    "syntax": [
      "fraction(num)",
      "fraction(matrix)",
      "fraction(num,den)",
      "fraction({n: num, d: den})"
    ],
    "description": "Create a fraction from a number or from integer numerator and denominator.",
    "examples": [
      "fraction(0.125)",
      "fraction(1, 3) + fraction(2, 5)",
      "fraction({n: 333, d: 53})",
      "fraction([sqrt(9), sqrt(10), sqrt(11)])"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "index",
      "matrix",
      "string",
      "unit"
    ]
  },
  {
    "name": "freqz",
    "category": "Signal",
    "syntax": [
      "freqz(b, a)",
      "freqz(b, a, w)"
    ],
    "description": "Calculates the frequency response of a filter given its numerator and denominator coefficients.",
    "examples": [
      "freqz([1, 2], [1, 2, 3])",
      "freqz([1, 2], [1, 2, 3], [0, 1])",
      "freqz([1, 2], [1, 2, 3], 512)"
    ],
    "seealso": []
  },
  {
    "name": "gamma",
    "category": "Probability",
    "syntax": [
      "gamma(n)"
    ],
    "description": "Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",
    "examples": [
      "gamma(4)",
      "3!",
      "gamma(1/2)",
      "sqrt(pi)"
    ],
    "seealso": [
      "factorial"
    ]
  },
  {
    "name": "gcd",
    "category": "Arithmetic",
    "syntax": [
      "gcd(a, b)",
      "gcd(a, b, c, ...)"
    ],
    "description": "Compute the greatest common divisor.",
    "examples": [
      "gcd(8, 12)",
      "gcd(-4, 6)",
      "gcd(25, 15, -10)"
    ],
    "seealso": [
      "lcm",
      "xgcd"
    ]
  },
  {
    "name": "getMatrixDataType",
    "category": "Matrix",
    "syntax": [
      "getMatrixDataType(x)"
    ],
    "description": "Find the data type of all elements in a matrix or array, for example \"number\" if all items are a number and \"Complex\" if all values are complex numbers. If a matrix contains more than one data type, it will return \"mixed\".",
    "examples": [
      "getMatrixDataType([1, 2, 3])",
      "getMatrixDataType([[5 cm], [2 inch]])",
      "getMatrixDataType([1, \"text\"])",
      "getMatrixDataType([1, bignumber(4)])"
    ],
    "seealso": [
      "matrix",
      "sparse",
      "typeOf"
    ]
  },
  {
    "name": "hasNumericValue",
    "category": "Utils",
    "syntax": [
      "hasNumericValue(x)"
    ],
    "description": "Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",
    "examples": [
      "hasNumericValue(2)",
      "hasNumericValue(\"2\")",
      "isNumeric(\"2\")",
      "hasNumericValue(0)",
      "hasNumericValue(bignumber(500))",
      "hasNumericValue(fraction(0.125))",
      "hasNumericValue(2 + 3i)",
      "hasNumericValue([2.3, \"foo\", false])"
    ],
    "seealso": [
      "isInteger",
      "isZero",
      "isNegative",
      "isPositive",
      "isNaN",
      "isNumeric"
    ]
  },
  {
    "name": "hex",
    "category": "Utils",
    "syntax": [
      "hex(value)"
    ],
    "description": "Format a number as hexadecimal",
    "examples": [
      "hex(240)"
    ],
    "seealso": [
      "bin",
      "oct"
    ]
  },
  {
    "name": "hypot",
    "category": "Arithmetic",
    "syntax": [
      "hypot(a, b, c, ...)",
      "hypot([a, b, c, ...])"
    ],
    "description": "Calculate the hypotenusa of a list with values. ",
    "examples": [
      "hypot(3, 4)",
      "sqrt(3^2 + 4^2)",
      "hypot(-2)",
      "hypot([3, 4, 5])"
    ],
    "seealso": [
      "abs",
      "norm"
    ]
  },
  {
    "name": "identity",
    "category": "Matrix",
    "syntax": [
      "identity(n)",
      "identity(m, n)",
      "identity([m, n])"
    ],
    "description": "Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",
    "examples": [
      "identity(3)",
      "identity(3, 5)",
      "a = [1, 2, 3; 4, 5, 6]",
      "identity(size(a))"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "ifft",
    "category": "Matrix",
    "syntax": [
      "ifft(x)"
    ],
    "description": "Calculate N-dimensional inverse fourier transform",
    "examples": [
      "ifft([[2, 2], [0, 0]])"
    ],
    "seealso": [
      "fft"
    ]
  },
  {
    "name": "im",
    "category": "Complex",
    "syntax": [
      "im(x)"
    ],
    "description": "Get the imaginary part of a complex number.",
    "examples": [
      "im(2 + 3i)",
      "re(2 + 3i)",
      "im(-5.2i)",
      "im(2.4)"
    ],
    "seealso": [
      "re",
      "conj",
      "abs",
      "arg"
    ]
  },
  {
    "name": "index",
    "category": "Construction",
    "syntax": [
      "[start]",
      "[start:end]",
      "[start:step:end]",
      "[start1, start 2, ...]",
      "[start1:end1, start2:end2, ...]",
      "[start1:step1:end1, start2:step2:end2, ...]"
    ],
    "description": "Create an index to get or replace a subset of a matrix",
    "examples": [
      "[1, 2, 3]",
      "A = [1, 2, 3; 4, 5, 6]",
      "A[1, :]",
      "A[1, 2] = 50",
      "A[1:2, 1:2] = ones(2, 2)"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "matrix,",
      "number",
      "range",
      "string",
      "unit"
    ]
  },
  {
    "name": "intersect",
    "category": "Geometry",
    "syntax": [
      "intersect(expr1, expr2, expr3, expr4)",
      "intersect(expr1, expr2, expr3)"
    ],
    "description": "Computes the intersection point of lines and/or planes.",
    "examples": [
      "intersect([0, 0], [10, 10], [10, 0], [0, 10])",
      "intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"
    ],
    "seealso": []
  },
  {
    "name": "inv",
    "category": "Matrix",
    "syntax": [
      "inv(x)"
    ],
    "description": "Calculate the inverse of a matrix",
    "examples": [
      "inv([1, 2; 3, 4])",
      "inv(4)",
      "1 / 4"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "invmod",
    "category": "Arithmetic",
    "syntax": [
      "invmod(a, b)"
    ],
    "description": "Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)",
    "examples": [
      "invmod(8, 12)",
      "invmod(7, 13)",
      "invmod(15151, 15122)"
    ],
    "seealso": [
      "gcd",
      "xgcd"
    ]
  },
  {
    "name": "isInteger",
    "category": "Utils",
    "syntax": [
      "isInteger(x)"
    ],
    "description": "Test whether a value is an integer number.",
    "examples": [
      "isInteger(2)",
      "isInteger(3.5)",
      "isInteger([3, 0.5, -2])"
    ],
    "seealso": [
      "isNegative",
      "isNumeric",
      "isPositive",
      "isZero"
    ]
  },
  {
    "name": "isNaN",
    "category": "Utils",
    "syntax": [
      "isNaN(x)"
    ],
    "description": "Test whether a value is NaN (not a number)",
    "examples": [
      "isNaN(2)",
      "isNaN(0 / 0)",
      "isNaN(NaN)",
      "isNaN(Infinity)"
    ],
    "seealso": [
      "isNegative",
      "isNumeric",
      "isPositive",
      "isZero"
    ]
  },
  {
    "name": "isNegative",
    "category": "Utils",
    "syntax": [
      "isNegative(x)"
    ],
    "description": "Test whether a value is negative: smaller than zero.",
    "examples": [
      "isNegative(2)",
      "isNegative(0)",
      "isNegative(-4)",
      "isNegative([3, 0.5, -2])"
    ],
    "seealso": [
      "isInteger",
      "isNumeric",
      "isPositive",
      "isZero"
    ]
  },
  {
    "name": "isNumeric",
    "category": "Utils",
    "syntax": [
      "isNumeric(x)"
    ],
    "description": "Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",
    "examples": [
      "isNumeric(2)",
      "isNumeric(\"2\")",
      "hasNumericValue(\"2\")",
      "isNumeric(0)",
      "isNumeric(bignumber(500))",
      "isNumeric(fraction(0.125))",
      "isNumeric(2 + 3i)",
      "isNumeric([2.3, \"foo\", false])"
    ],
    "seealso": [
      "isInteger",
      "isZero",
      "isNegative",
      "isPositive",
      "isNaN",
      "hasNumericValue"
    ]
  },
  {
    "name": "isPositive",
    "category": "Utils",
    "syntax": [
      "isPositive(x)"
    ],
    "description": "Test whether a value is positive: larger than zero.",
    "examples": [
      "isPositive(2)",
      "isPositive(0)",
      "isPositive(-4)",
      "isPositive([3, 0.5, -2])"
    ],
    "seealso": [
      "isInteger",
      "isNumeric",
      "isNegative",
      "isZero"
    ]
  },
  {
    "name": "isPrime",
    "category": "Utils",
    "syntax": [
      "isPrime(x)"
    ],
    "description": "Test whether a value is prime: has no divisors other than itself and one.",
    "examples": [
      "isPrime(3)",
      "isPrime(-2)",
      "isPrime([2, 17, 100])"
    ],
    "seealso": [
      "isInteger",
      "isNumeric",
      "isNegative",
      "isZero"
    ]
  },
  {
    "name": "isZero",
    "category": "Utils",
    "syntax": [
      "isZero(x)"
    ],
    "description": "Test whether a value is zero.",
    "examples": [
      "isZero(2)",
      "isZero(0)",
      "isZero(-4)",
      "isZero([3, 0, -2, 0])"
    ],
    "seealso": [
      "isInteger",
      "isNumeric",
      "isNegative",
      "isPositive"
    ]
  },
  {
    "name": "kldivergence",
    "category": "Probability",
    "syntax": [
      "kldivergence(x, y)"
    ],
    "description": "Calculate the Kullback-Leibler (KL) divergence  between two distributions.",
    "examples": [
      "kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"
    ],
    "seealso": []
  },
  {
    "name": "kron",
    "category": "Matrix",
    "syntax": [
      "kron(x, y)"
    ],
    "description": "Calculates the kronecker product of 2 matrices or vectors.",
    "examples": [
      "kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])",
      "kron([1,1], [2,3,4])"
    ],
    "seealso": [
      "multiply",
      "dot",
      "cross"
    ]
  },
  {
    "name": "larger",
    "category": "Relational",
    "syntax": [
      "x > y",
      "larger(x, y)"
    ],
    "description": "Check if value x is larger than y. Returns true if x is larger than y, and false if not.",
    "examples": [
      "2 > 3",
      "5 > 2*2",
      "a = 3.3",
      "b = 6-2.8",
      "(a > b)",
      "(b < a)",
      "5 cm > 2 inch"
    ],
    "seealso": [
      "equal",
      "unequal",
      "smaller",
      "smallerEq",
      "largerEq",
      "compare"
    ]
  },
  {
    "name": "largerEq",
    "category": "Relational",
    "syntax": [
      "x >= y",
      "largerEq(x, y)"
    ],
    "description": "Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",
    "examples": [
      "2 >= 1+1",
      "2 > 1+1",
      "a = 3.2",
      "b = 6-2.8",
      "(a >= b)"
    ],
    "seealso": [
      "equal",
      "unequal",
      "smallerEq",
      "smaller",
      "compare"
    ]
  },
  {
    "name": "lcm",
    "category": "Arithmetic",
    "syntax": [
      "lcm(x, y)"
    ],
    "description": "Compute the least common multiple.",
    "examples": [
      "lcm(4, 6)",
      "lcm(6, 21)",
      "lcm(6, 21, 5)"
    ],
    "seealso": [
      "gcd"
    ]
  },
  {
    "name": "leftShift",
    "category": "Bitwise",
    "syntax": [
      "x << y",
      "leftShift(x, y)"
    ],
    "description": "Bitwise left logical shift of a value x by y number of bits.",
    "examples": [
      "4 << 1",
      "8 >> 1"
    ],
    "seealso": [
      "bitAnd",
      "bitNot",
      "bitOr",
      "bitXor",
      "rightArithShift",
      "rightLogShift"
    ]
  },
  {
    "name": "lgamma",
    "category": "Probability",
    "syntax": [
      "lgamma(n)"
    ],
    "description": "Logarithm of the gamma function for real, positive numbers and complex numbers, using Lanczos approximation for numbers and Stirling series for complex numbers.",
    "examples": [
      "lgamma(4)",
      "lgamma(1/2)",
      "lgamma(i)",
      "lgamma(complex(1.1, 2))"
    ],
    "seealso": [
      "gamma"
    ]
  },
  {
    "name": "log",
    "category": "Arithmetic",
    "syntax": [
      "log(x)",
      "log(x, base)"
    ],
    "description": "Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",
    "examples": [
      "log(3.5)",
      "a = log(2.4)",
      "exp(a)",
      "10 ^ 4",
      "log(10000, 10)",
      "log(10000) / log(10)",
      "b = log(1024, 2)",
      "2 ^ b"
    ],
    "seealso": [
      "exp",
      "log1p",
      "log2",
      "log10"
    ]
  },
  {
    "name": "log10",
    "category": "Arithmetic",
    "syntax": [
      "log10(x)"
    ],
    "description": "Compute the 10-base logarithm of a value.",
    "examples": [
      "log10(0.00001)",
      "log10(10000)",
      "10 ^ 4",
      "log(10000) / log(10)",
      "log(10000, 10)"
    ],
    "seealso": [
      "exp",
      "log"
    ]
  },
  {
    "name": "log1p",
    "category": "Arithmetic",
    "syntax": [
      "log1p(x)",
      "log1p(x, base)"
    ],
    "description": "Calculate the logarithm of a `value+1`",
    "examples": [
      "log1p(2.5)",
      "exp(log1p(1.4))",
      "pow(10, 4)",
      "log1p(9999, 10)",
      "log1p(9999) / log(10)"
    ],
    "seealso": [
      "exp",
      "log",
      "log2",
      "log10"
    ]
  },
  {
    "name": "log2",
    "category": "Arithmetic",
    "syntax": [
      "log2(x)"
    ],
    "description": "Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",
    "examples": [
      "log2(0.03125)",
      "log2(16)",
      "log2(16) / log2(2)",
      "pow(2, 4)"
    ],
    "seealso": [
      "exp",
      "log1p",
      "log",
      "log10"
    ]
  },
  {
    "name": "lsolve",
    "category": "Algebra",
    "syntax": [
      "x=lsolve(L, b)"
    ],
    "description": "Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
    "examples": [
      "a = [-2, 3; 2, 1]",
      "b = [11, 9]",
      "x = lsolve(a, b)"
    ],
    "seealso": [
      "lsolveAll",
      "lup",
      "lusolve",
      "usolve",
      "matrix",
      "sparse"
    ]
  },
  {
    "name": "lsolveAll",
    "category": "Algebra",
    "syntax": [
      "x=lsolveAll(L, b)"
    ],
    "description": "Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
    "examples": [
      "a = [-2, 3; 2, 1]",
      "b = [11, 9]",
      "x = lsolve(a, b)"
    ],
    "seealso": [
      "lsolve",
      "lup",
      "lusolve",
      "usolve",
      "matrix",
      "sparse"
    ]
  },
  {
    "name": "lup",
    "category": "Algebra",
    "syntax": [
      "lup(m)"
    ],
    "description": "Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",
    "examples": [
      "lup([[2, 1], [1, 4]])",
      "lup(matrix([[2, 1], [1, 4]]))",
      "lup(sparse([[2, 1], [1, 4]]))"
    ],
    "seealso": [
      "lusolve",
      "lsolve",
      "usolve",
      "matrix",
      "sparse",
      "slu",
      "qr"
    ]
  },
  {
    "name": "lusolve",
    "category": "Algebra",
    "syntax": [
      "x=lusolve(A, b)",
      "x=lusolve(lu, b)"
    ],
    "description": "Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",
    "examples": [
      "a = [-2, 3; 2, 1]",
      "b = [11, 9]",
      "x = lusolve(a, b)"
    ],
    "seealso": [
      "lup",
      "slu",
      "lsolve",
      "usolve",
      "matrix",
      "sparse"
    ]
  },
  {
    "name": "lyap",
    "category": "Algebra",
    "syntax": [
      "lyap(A,Q)"
    ],
    "description": "Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P",
    "examples": [
      "lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])",
      "A = [[-2, 0], [1, -4]]",
      "Q = [[3, 1], [1, 3]]",
      "lyap(A,Q)"
    ],
    "seealso": [
      "schur",
      "sylvester"
    ]
  },
  {
    "name": "mad",
    "category": "Statistics",
    "syntax": [
      "mad(a, b, c, ...)",
      "mad(A)"
    ],
    "description": "Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",
    "examples": [
      "mad(10, 20, 30)",
      "mad([1, 2, 3])"
    ],
    "seealso": [
      "mean",
      "median",
      "std",
      "abs"
    ]
  },
  {
    "name": "map",
    "category": "Matrix",
    "syntax": [
      "map(x, callback)"
    ],
    "description": "Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",
    "examples": [
      "map([1, 2, 3], square)"
    ],
    "seealso": [
      "filter",
      "forEach"
    ]
  },
  {
    "name": "matrix",
    "category": "Construction",
    "syntax": [
      "[]",
      "[a1, b1, ...; a2, b2, ...]",
      "matrix()",
      "matrix(\"dense\")",
      "matrix([...])"
    ],
    "description": "Create a matrix.",
    "examples": [
      "[]",
      "[1, 2, 3]",
      "[1, 2, 3; 4, 5, 6]",
      "matrix()",
      "matrix([3, 4])",
      "matrix([3, 4; 5, 6], \"sparse\")",
      "matrix([3, 4; 5, 6], \"sparse\", \"number\")"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "index",
      "number",
      "string",
      "unit",
      "sparse"
    ]
  },
  {
    "name": "matrixFromColumns",
    "category": "Matrix",
    "syntax": [
      "matrixFromColumns(...arr)",
      "matrixFromColumns(row1, row2)",
      "matrixFromColumns(row1, row2, row3)"
    ],
    "description": "Create a dense matrix from vectors as individual columns.",
    "examples": [
      "matrixFromColumns([1, 2, 3], [[4],[5],[6]])"
    ],
    "seealso": [
      "matrix",
      "matrixFromRows",
      "matrixFromFunction",
      "zeros"
    ]
  },
  {
    "name": "matrixFromFunction",
    "category": "Matrix",
    "syntax": [
      "matrixFromFunction(size, fn)",
      "matrixFromFunction(size, fn, format)",
      "matrixFromFunction(size, fn, format, datatype)",
      "matrixFromFunction(size, format, fn)",
      "matrixFromFunction(size, format, datatype, fn)"
    ],
    "description": "Create a matrix by evaluating a generating function at each index.",
    "examples": [
      "f(I) = I[1] - I[2]",
      "matrixFromFunction([3,3], f)",
      "g(I) = I[1] - I[2] == 1 ? 4 : 0",
      "matrixFromFunction([100, 100], \"sparse\", g)",
      "matrixFromFunction([5], random)"
    ],
    "seealso": [
      "matrix",
      "matrixFromRows",
      "matrixFromColumns",
      "zeros"
    ]
  },
  {
    "name": "matrixFromRows",
    "category": "Matrix",
    "syntax": [
      "matrixFromRows(...arr)",
      "matrixFromRows(row1, row2)",
      "matrixFromRows(row1, row2, row3)"
    ],
    "description": "Create a dense matrix from vectors as individual rows.",
    "examples": [
      "matrixFromRows([1, 2, 3], [[4],[5],[6]])"
    ],
    "seealso": [
      "matrix",
      "matrixFromColumns",
      "matrixFromFunction",
      "zeros"
    ]
  },
  {
    "name": "max",
    "category": "Statistics",
    "syntax": [
      "max(a, b, c, ...)",
      "max(A)",
      "max(A, dimension)"
    ],
    "description": "Compute the maximum value of a list of values.",
    "examples": [
      "max(2, 3, 4, 1)",
      "max([2, 3, 4, 1])",
      "max([2, 5; 4, 3])",
      "max([2, 5; 4, 3], 1)",
      "max([2, 5; 4, 3], 2)",
      "max(2.7, 7.1, -4.5, 2.0, 4.1)",
      "min(2.7, 7.1, -4.5, 2.0, 4.1)"
    ],
    "seealso": [
      "mean",
      "median",
      "min",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "mean",
    "category": "Statistics",
    "syntax": [
      "mean(a, b, c, ...)",
      "mean(A)",
      "mean(A, dimension)"
    ],
    "description": "Compute the arithmetic mean of a list of values.",
    "examples": [
      "mean(2, 3, 4, 1)",
      "mean([2, 3, 4, 1])",
      "mean([2, 5; 4, 3])",
      "mean([2, 5; 4, 3], 1)",
      "mean([2, 5; 4, 3], 2)",
      "mean([1.0, 2.7, 3.2, 4.0])"
    ],
    "seealso": [
      "max",
      "median",
      "min",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "median",
    "category": "Statistics",
    "syntax": [
      "median(a, b, c, ...)",
      "median(A)"
    ],
    "description": "Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",
    "examples": [
      "median(5, 2, 7)",
      "median([3, -1, 5, 7])"
    ],
    "seealso": [
      "max",
      "mean",
      "min",
      "prod",
      "std",
      "sum",
      "variance",
      "quantileSeq"
    ]
  },
  {
    "name": "min",
    "category": "Statistics",
    "syntax": [
      "min(a, b, c, ...)",
      "min(A)",
      "min(A, dimension)"
    ],
    "description": "Compute the minimum value of a list of values.",
    "examples": [
      "min(2, 3, 4, 1)",
      "min([2, 3, 4, 1])",
      "min([2, 5; 4, 3])",
      "min([2, 5; 4, 3], 1)",
      "min([2, 5; 4, 3], 2)",
      "min(2.7, 7.1, -4.5, 2.0, 4.1)",
      "max(2.7, 7.1, -4.5, 2.0, 4.1)"
    ],
    "seealso": [
      "max",
      "mean",
      "median",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "mod",
    "category": "Operators",
    "syntax": [
      "x % y",
      "x mod y",
      "mod(x, y)"
    ],
    "description": "Calculates the modulus, the remainder of an integer division.",
    "examples": [
      "7 % 3",
      "11 % 2",
      "10 mod 4",
      "isOdd(x) = x % 2",
      "isOdd(2)",
      "isOdd(3)"
    ],
    "seealso": [
      "divide"
    ]
  },
  {
    "name": "mode",
    "category": "Statistics",
    "syntax": [
      "mode(a, b, c, ...)",
      "mode(A)",
      "mode(A, a, b, B, c, ...)"
    ],
    "description": "Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",
    "examples": [
      "mode(2, 1, 4, 3, 1)",
      "mode([1, 2.7, 3.2, 4, 2.7])",
      "mode(1, 4, 6, 1, 6)"
    ],
    "seealso": [
      "max",
      "mean",
      "min",
      "median",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "multinomial",
    "category": "Probability",
    "syntax": [
      "multinomial(A)"
    ],
    "description": "Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",
    "examples": [
      "multinomial([1, 2, 1])"
    ],
    "seealso": [
      "combinations",
      "factorial"
    ]
  },
  {
    "name": "multiply",
    "category": "Operators",
    "syntax": [
      "x * y",
      "multiply(x, y)"
    ],
    "description": "multiply two values.",
    "examples": [
      "a = 2.1 * 3.4",
      "a / 3.4",
      "2 * 3 + 4",
      "2 * (3 + 4)",
      "3 * 2.1 km"
    ],
    "seealso": [
      "divide"
    ]
  },
  {
    "name": "norm",
    "category": "Arithmetic",
    "syntax": [
      "norm(x)",
      "norm(x, p)"
    ],
    "description": "Calculate the norm of a number, vector or matrix.",
    "examples": [
      "abs(-3.5)",
      "norm(-3.5)",
      "norm(3 - 4i)",
      "norm([1, 2, -3], Infinity)",
      "norm([1, 2, -3], -Infinity)",
      "norm([3, 4], 2)",
      "norm([[1, 2], [3, 4]], 1)",
      "norm([[1, 2], [3, 4]], \"inf\")",
      "norm([[1, 2], [3, 4]], \"fro\")"
    ]
  },
  {
    "name": "not",
    "category": "Logical",
    "syntax": [
      "not x",
      "not(x)"
    ],
    "description": "Logical not. Flips the boolean value of given argument.",
    "examples": [
      "not true",
      "not false",
      "not 2",
      "not 0"
    ],
    "seealso": [
      "and",
      "or",
      "xor"
    ]
  },
  {
    "name": "nthRoot",
    "category": "Arithmetic",
    "syntax": [
      "nthRoot(a)",
      "nthRoot(a, root)"
    ],
    "description": "Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation \"x^root = A\".",
    "examples": [
      "4 ^ 3",
      "nthRoot(64, 3)",
      "nthRoot(9, 2)",
      "sqrt(9)"
    ],
    "seealso": [
      "nthRoots",
      "pow",
      "sqrt"
    ]
  },
  {
    "name": "nthRoots",
    "category": "Arithmetic",
    "syntax": [
      "nthRoots(A)",
      "nthRoots(A, root)"
    ],
    "description": "Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation \"x^root = A\". This function returns an array of complex values.",
    "examples": [
      "nthRoots(1)",
      "nthRoots(1, 3)"
    ],
    "seealso": [
      "sqrt",
      "pow",
      "nthRoot"
    ]
  },
  {
    "name": "number",
    "category": "Construction",
    "syntax": [
      "x",
      "number(x)",
      "number(unit, valuelessUnit)"
    ],
    "description": "Create a number or convert a string or boolean into a number.",
    "examples": [
      "2",
      "2e3",
      "4.05",
      "number(2)",
      "number(\"7.2\")",
      "number(true)",
      "number([true, false, true, true])",
      "number(unit(\"52cm\"), \"m\")"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "fraction",
      "index",
      "matrix",
      "string",
      "unit"
    ]
  },
  {
    "name": "numeric",
    "category": "Utils",
    "syntax": [
      "numeric(x)"
    ],
    "description": "Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.",
    "examples": [
      "numeric(\"4\")",
      "numeric(\"4\", \"number\")",
      "numeric(\"4\", \"BigNumber\")",
      "numeric(\"4\", \"Fraction\")",
      "numeric(4, \"Fraction\")",
      "numeric(fraction(2, 5), \"number\")"
    ],
    "seealso": [
      "number",
      "fraction",
      "bignumber",
      "string",
      "format"
    ]
  },
  {
    "name": "oct",
    "category": "Utils",
    "syntax": [
      "oct(value)"
    ],
    "description": "Format a number as octal",
    "examples": [
      "oct(56)"
    ],
    "seealso": [
      "bin",
      "hex"
    ]
  },
  {
    "name": "ones",
    "category": "Matrix",
    "syntax": [
      "ones(m)",
      "ones(m, n)",
      "ones(m, n, p, ...)",
      "ones([m])",
      "ones([m, n])",
      "ones([m, n, p, ...])"
    ],
    "description": "Create a matrix containing ones.",
    "examples": [
      "ones(3)",
      "ones(3, 5)",
      "ones([2,3]) * 4.5",
      "a = [1, 2, 3; 4, 5, 6]",
      "ones(size(a))"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "or",
    "category": "Logical",
    "syntax": [
      "x or y",
      "or(x, y)"
    ],
    "description": "Logical or. Test if at least one value is defined with a nonzero/nonempty value.",
    "examples": [
      "true or false",
      "false or false",
      "0 or 4"
    ],
    "seealso": [
      "not",
      "and",
      "xor"
    ]
  },
  {
    "name": "partitionSelect",
    "category": "Matrix",
    "syntax": [
      "partitionSelect(x, k)",
      "partitionSelect(x, k, compare)"
    ],
    "description": "Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",
    "examples": [
      "partitionSelect([5, 10, 1], 2)",
      "partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1, compareText)",
      "arr = [5, 2, 1]",
      "partitionSelect(arr, 0) # returns 1, arr is now: [1, 2, 5]",
      "arr",
      "partitionSelect(arr, 1, 'desc') # returns 2, arr is now: [5, 2, 1]",
      "arr"
    ],
    "seealso": [
      "sort"
    ]
  },
  {
    "name": "permutations",
    "category": "Probability",
    "syntax": [
      "permutations(n)",
      "permutations(n, k)"
    ],
    "description": "Compute the number of permutations of n items taken k at a time",
    "examples": [
      "permutations(5)",
      "permutations(5, 3)"
    ],
    "seealso": [
      "combinations",
      "combinationsWithRep",
      "factorial"
    ]
  },
  {
    "name": "pickRandom",
    "category": "Probability",
    "syntax": [
      "pickRandom(array)",
      "pickRandom(array, number)",
      "pickRandom(array, weights)",
      "pickRandom(array, number, weights)",
      "pickRandom(array, weights, number)"
    ],
    "description": "Pick a random entry from a given array.",
    "examples": [
      "pickRandom(0:10)",
      "pickRandom([1, 3, 1, 6])",
      "pickRandom([1, 3, 1, 6], 2)",
      "pickRandom([1, 3, 1, 6], [2, 3, 2, 1])",
      "pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])",
      "pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"
    ],
    "seealso": [
      "random",
      "randomInt"
    ]
  },
  {
    "name": "pinv",
    "category": "Matrix",
    "syntax": [
      "pinv(x)"
    ],
    "description": "Calculate the Moore–Penrose inverse of a matrix",
    "examples": [
      "pinv([1, 2; 3, 4])",
      "pinv([[1, 0], [0, 1], [0, 1]])",
      "pinv(4)"
    ],
    "seealso": [
      "inv"
    ]
  },
  {
    "name": "polynomialRoot",
    "category": "Algebra",
    "syntax": [
      "x=polynomialRoot(-6, 3)",
      "x=polynomialRoot(4, -4, 1)",
      "x=polynomialRoot(-8, 12, -6, 1)"
    ],
    "description": "Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.",
    "examples": [
      "a = polynomialRoot(-6, 11, -6, 1)"
    ],
    "seealso": [
      "cbrt",
      "sqrt"
    ]
  },
  {
    "name": "pow",
    "category": "Operators",
    "syntax": [
      "x ^ y",
      "pow(x, y)"
    ],
    "description": "Calculates the power of x to y, x^y.",
    "examples": [
      "2^3",
      "2*2*2",
      "1 + e ^ (pi * i)",
      "pow([[1, 2], [4, 3]], 2)",
      "pow([[1, 2], [4, 3]], -1)"
    ],
    "seealso": [
      "multiply",
      "nthRoot",
      "nthRoots",
      "sqrt"
    ]
  },
  {
    "name": "print",
    "category": "Utils",
    "syntax": [
      "print(template, values)",
      "print(template, values, precision)"
    ],
    "description": "Interpolate values into a string template.",
    "examples": [
      "print(\"Lucy is $age years old\", {age: 5})",
      "print(\"The value of pi is $pi\", {pi: pi}, 3)",
      "print(\"Hello, $user.name!\", {user: {name: \"John\"}})",
      "print(\"Values: $0, $1, $2\", [6, 9, 4])"
    ],
    "seealso": [
      "format"
    ]
  },
  {
    "name": "prod",
    "category": "Statistics",
    "syntax": [
      "prod(a, b, c, ...)",
      "prod(A)"
    ],
    "description": "Compute the product of all values.",
    "examples": [
      "prod(2, 3, 4)",
      "prod([2, 3, 4])",
      "prod([2, 5; 4, 3])"
    ],
    "seealso": [
      "max",
      "mean",
      "min",
      "median",
      "min",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "qr",
    "category": "Algebra",
    "syntax": [
      "qr(A)"
    ],
    "description": "Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",
    "examples": [
      "qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"
    ],
    "seealso": [
      "lup",
      "slu",
      "matrix"
    ]
  },
  {
    "name": "quantileSeq",
    "category": "Statistics",
    "syntax": [
      "quantileSeq(A, prob[, sorted])",
      "quantileSeq(A, [prob1, prob2, ...][, sorted])",
      "quantileSeq(A, N[, sorted])"
    ],
    "description": "Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",
    "examples": [
      "quantileSeq([3, -1, 5, 7], 0.5)",
      "quantileSeq([3, -1, 5, 7], [1/3, 2/3])",
      "quantileSeq([3, -1, 5, 7], 2)",
      "quantileSeq([-1, 3, 5, 7], 0.5, true)"
    ],
    "seealso": [
      "mean",
      "median",
      "min",
      "max",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "random",
    "category": "Probability",
    "syntax": [
      "random()",
      "random(max)",
      "random(min, max)",
      "random(size)",
      "random(size, max)",
      "random(size, min, max)"
    ],
    "description": "Return a random number.",
    "examples": [
      "random()",
      "random(10, 20)",
      "random([2, 3])"
    ],
    "seealso": [
      "pickRandom",
      "randomInt"
    ]
  },
  {
    "name": "randomInt",
    "category": "Probability",
    "syntax": [
      "randomInt(max)",
      "randomInt(min, max)",
      "randomInt(size)",
      "randomInt(size, max)",
      "randomInt(size, min, max)"
    ],
    "description": "Return a random integer number",
    "examples": [
      "randomInt(10, 20)",
      "randomInt([2, 3], 10)"
    ],
    "seealso": [
      "pickRandom",
      "random"
    ]
  },
  {
    "name": "range",
    "category": "Type",
    "syntax": [
      "start:end",
      "start:step:end",
      "range(start, end)",
      "range(start, end, step)",
      "range(string)"
    ],
    "description": "Create a range. Lower bound of the range is included, upper bound is excluded.",
    "examples": [
      "1:5",
      "3:-1:-3",
      "range(3, 7)",
      "range(0, 12, 2)",
      "range(\"4:10\")",
      "range(1m, 1m, 3m)",
      "a = [1, 2, 3, 4; 5, 6, 7, 8]",
      "a[1:2, 1:2]"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "re",
    "category": "Complex",
    "syntax": [
      "re(x)"
    ],
    "description": "Get the real part of a complex number.",
    "examples": [
      "re(2 + 3i)",
      "im(2 + 3i)",
      "re(-5.2i)",
      "re(2.4)"
    ],
    "seealso": [
      "im",
      "conj",
      "abs",
      "arg"
    ]
  },
  {
    "name": "reshape",
    "category": "Matrix",
    "syntax": [
      "reshape(x, sizes)"
    ],
    "description": "Reshape a multi dimensional array to fit the specified dimensions.",
    "examples": [
      "reshape([1, 2, 3, 4, 5, 6], [2, 3])",
      "reshape([[1, 2], [3, 4]], [1, 4])",
      "reshape([[1, 2], [3, 4]], [4])",
      "reshape([1, 2, 3, 4], [-1, 2])"
    ],
    "seealso": [
      "size",
      "squeeze",
      "resize"
    ]
  },
  {
    "name": "resize",
    "category": "Matrix",
    "syntax": [
      "resize(x, size)",
      "resize(x, size, defaultValue)"
    ],
    "description": "Resize a matrix.",
    "examples": [
      "resize([1,2,3,4,5], [3])",
      "resize([1,2,3], [5])",
      "resize([1,2,3], [5], -1)",
      "resize(2, [2, 3])",
      "resize(\"hello\", [8], \"!\")"
    ],
    "seealso": [
      "size",
      "subset",
      "squeeze",
      "reshape"
    ]
  },
  {
    "name": "rightArithShift",
    "category": "Bitwise",
    "syntax": [
      "x >> y",
      "rightArithShift(x, y)"
    ],
    "description": "Bitwise right arithmetic shift of a value x by y number of bits.",
    "examples": [
      "8 >> 1",
      "4 << 1",
      "-12 >> 2"
    ],
    "seealso": [
      "bitAnd",
      "bitNot",
      "bitOr",
      "bitXor",
      "leftShift",
      "rightLogShift"
    ]
  },
  {
    "name": "rightLogShift",
    "category": "Bitwise",
    "syntax": [
      "x >>> y",
      "rightLogShift(x, y)"
    ],
    "description": "Bitwise right logical shift of a value x by y number of bits.",
    "examples": [
      "8 >>> 1",
      "4 << 1",
      "-12 >>> 2"
    ],
    "seealso": [
      "bitAnd",
      "bitNot",
      "bitOr",
      "bitXor",
      "leftShift",
      "rightArithShift"
    ]
  },
  {
    "name": "rotate",
    "category": "Matrix",
    "syntax": [
      "rotate(w, theta)",
      "rotate(w, theta, v)"
    ],
    "description": "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
    "examples": [
      "rotate([1, 0], pi / 2)",
      "rotate(matrix([1, 0]), unit(\"35deg\"))",
      "rotate([1, 0, 0], unit(\"90deg\"), [0, 0, 1])",
      "rotate(matrix([1, 0, 0]), unit(\"90deg\"), matrix([0, 0, 1]))"
    ],
    "seealso": [
      "matrix",
      "rotationMatrix"
    ]
  },
  {
    "name": "rotationMatrix",
    "category": "Matrix",
    "syntax": [
      "rotationMatrix(theta)",
      "rotationMatrix(theta, v)",
      "rotationMatrix(theta, v, format)"
    ],
    "description": "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
    "examples": [
      "rotationMatrix(pi / 2)",
      "rotationMatrix(unit(\"45deg\"), [0, 0, 1])",
      "rotationMatrix(1, matrix([0, 0, 1]), \"sparse\")"
    ],
    "seealso": [
      "cos",
      "sin"
    ]
  },
  {
    "name": "round",
    "category": "Arithmetic",
    "syntax": [
      "round(x)",
      "round(x, n)"
    ],
    "description": "round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",
    "examples": [
      "round(3.2)",
      "round(3.8)",
      "round(-4.2)",
      "round(-4.8)",
      "round(pi, 3)",
      "round(123.45678, 2)"
    ],
    "seealso": [
      "ceil",
      "floor",
      "fix"
    ]
  },
  {
    "name": "row",
    "category": "Matrix",
    "syntax": [
      "row(x, index)"
    ],
    "description": "Return a row from a matrix or array.",
    "examples": [
      "A = [[1, 2], [3, 4]]",
      "row(A, 1)",
      "row(A, 2)"
    ],
    "seealso": [
      "column",
      "matrixFromRows"
    ]
  },
  {
    "name": "schur",
    "category": "Algebra",
    "syntax": [
      "schur(A)"
    ],
    "description": "Performs a real Schur decomposition of the real matrix A = UTU'",
    "examples": [
      "schur([[1, 0], [-4, 3]])",
      "A = [[1, 0], [-4, 3]]",
      "schur(A)"
    ],
    "seealso": [
      "lyap",
      "sylvester"
    ]
  },
  {
    "name": "sec",
    "category": "Trigonometry",
    "syntax": [
      "sec(x)"
    ],
    "description": "Compute the secant of x in radians. Defined as 1/cos(x)",
    "examples": [
      "sec(2)",
      "1 / cos(2)"
    ],
    "seealso": [
      "cot",
      "csc",
      "cos"
    ]
  },
  {
    "name": "sech",
    "category": "Trigonometry",
    "syntax": [
      "sech(x)"
    ],
    "description": "Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",
    "examples": [
      "sech(2)",
      "1 / cosh(2)"
    ],
    "seealso": [
      "coth",
      "csch",
      "cosh"
    ]
  },
  {
    "name": "setCartesian",
    "category": "Set",
    "syntax": [
      "setCartesian(set1, set2)"
    ],
    "description": "Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.",
    "examples": [
      "setCartesian([1, 2], [3, 4])"
    ],
    "seealso": [
      "setUnion",
      "setIntersect",
      "setDifference",
      "setPowerset"
    ]
  },
  {
    "name": "setDifference",
    "category": "Set",
    "syntax": [
      "setDifference(set1, set2)"
    ],
    "description": "Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
    "examples": [
      "setDifference([1, 2, 3, 4], [3, 4, 5, 6])",
      "setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"
    ],
    "seealso": [
      "setUnion",
      "setIntersect",
      "setSymDifference"
    ]
  },
  {
    "name": "setDistinct",
    "category": "Set",
    "syntax": [
      "setDistinct(set)"
    ],
    "description": "Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
    "examples": [
      "setDistinct([1, 1, 1, 2, 2, 3])"
    ],
    "seealso": [
      "setMultiplicity"
    ]
  },
  {
    "name": "setIntersect",
    "category": "Set",
    "syntax": [
      "setIntersect(set1, set2)"
    ],
    "description": "Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
    "examples": [
      "setIntersect([1, 2, 3, 4], [3, 4, 5, 6])",
      "setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"
    ],
    "seealso": [
      "setUnion",
      "setDifference"
    ]
  },
  {
    "name": "setIsSubset",
    "category": "Set",
    "syntax": [
      "setIsSubset(set1, set2)"
    ],
    "description": "Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
    "examples": [
      "setIsSubset([1, 2], [3, 4, 5, 6])",
      "setIsSubset([3, 4], [3, 4, 5, 6])"
    ],
    "seealso": [
      "setUnion",
      "setIntersect",
      "setDifference"
    ]
  },
  {
    "name": "setMultiplicity",
    "category": "Set",
    "syntax": [
      "setMultiplicity(element, set)"
    ],
    "description": "Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",
    "examples": [
      "setMultiplicity(1, [1, 2, 2, 4])",
      "setMultiplicity(2, [1, 2, 2, 4])"
    ],
    "seealso": [
      "setDistinct",
      "setSize"
    ]
  },
  {
    "name": "setPowerset",
    "category": "Set",
    "syntax": [
      "setPowerset(set)"
    ],
    "description": "Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",
    "examples": [
      "setPowerset([1, 2, 3])"
    ],
    "seealso": [
      "setCartesian"
    ]
  },
  {
    "name": "setSize",
    "category": "Set",
    "syntax": [
      "setSize(set)",
      "setSize(set, unique)"
    ],
    "description": "Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.",
    "examples": [
      "setSize([1, 2, 2, 4])",
      "setSize([1, 2, 2, 4], true)"
    ],
    "seealso": [
      "setUnion",
      "setIntersect",
      "setDifference"
    ]
  },
  {
    "name": "setSymDifference",
    "category": "Set",
    "syntax": [
      "setSymDifference(set1, set2)"
    ],
    "description": "Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
    "examples": [
      "setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])",
      "setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"
    ],
    "seealso": [
      "setUnion",
      "setIntersect",
      "setDifference"
    ]
  },
  {
    "name": "setUnion",
    "category": "Set",
    "syntax": [
      "setUnion(set1, set2)"
    ],
    "description": "Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",
    "examples": [
      "setUnion([1, 2, 3, 4], [3, 4, 5, 6])",
      "setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"
    ],
    "seealso": [
      "setIntersect",
      "setDifference"
    ]
  },
  {
    "name": "sign",
    "category": "Arithmetic",
    "syntax": [
      "sign(x)"
    ],
    "description": "Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",
    "examples": [
      "sign(3.5)",
      "sign(-4.2)",
      "sign(0)"
    ],
    "seealso": [
      "abs"
    ]
  },
  {
    "name": "sin",
    "category": "Trigonometry",
    "syntax": [
      "sin(x)"
    ],
    "description": "Compute the sine of x in radians.",
    "examples": [
      "sin(2)",
      "sin(pi / 4) ^ 2",
      "sin(90 deg)",
      "sin(30 deg)",
      "sin(0.2)^2 + cos(0.2)^2"
    ],
    "seealso": [
      "asin",
      "cos",
      "tan"
    ]
  },
  {
    "name": "sinh",
    "category": "Trigonometry",
    "syntax": [
      "sinh(x)"
    ],
    "description": "Compute the hyperbolic sine of x in radians.",
    "examples": [
      "sinh(0.5)"
    ],
    "seealso": [
      "cosh",
      "tanh"
    ]
  },
  {
    "name": "size",
    "category": "Matrix",
    "syntax": [
      "size(x)"
    ],
    "description": "Calculate the size of a matrix.",
    "examples": [
      "size(2.3)",
      "size(\"hello world\")",
      "a = [1, 2; 3, 4; 5, 6]",
      "size(a)",
      "size(1:6)"
    ],
    "seealso": [
      "concat",
      "count",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "squeeze",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "slu",
    "category": "Algebra",
    "syntax": [
      "slu(A, order, threshold)"
    ],
    "description": "Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",
    "examples": [
      "slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"
    ],
    "seealso": [
      "lusolve",
      "lsolve",
      "usolve",
      "matrix",
      "sparse",
      "lup",
      "qr"
    ]
  },
  {
    "name": "smaller",
    "category": "Relational",
    "syntax": [
      "x < y",
      "smaller(x, y)"
    ],
    "description": "Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",
    "examples": [
      "2 < 3",
      "5 < 2*2",
      "a = 3.3",
      "b = 6-2.8",
      "(a < b)",
      "5 cm < 2 inch"
    ],
    "seealso": [
      "equal",
      "unequal",
      "larger",
      "smallerEq",
      "largerEq",
      "compare"
    ]
  },
  {
    "name": "smallerEq",
    "category": "Relational",
    "syntax": [
      "x <= y",
      "smallerEq(x, y)"
    ],
    "description": "Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",
    "examples": [
      "2 <= 1+1",
      "2 < 1+1",
      "a = 3.2",
      "b = 6-2.8",
      "(a <= b)"
    ],
    "seealso": [
      "equal",
      "unequal",
      "larger",
      "smaller",
      "largerEq",
      "compare"
    ]
  },
  {
    "name": "solveODE",
    "category": "Numeric",
    "syntax": [
      "solveODE(func, tspan, y0)",
      "solveODE(func, tspan, y0, options)"
    ],
    "description": "Numerical Integration of Ordinary Differential Equations.",
    "examples": [
      "f(t,y) = y",
      "tspan = [0, 4]",
      "solveODE(f, tspan, 1)",
      "solveODE(f, tspan, [1, 2])",
      "solveODE(f, tspan, 1, { method:\"RK23\", maxStep:0.1 })"
    ],
    "seealso": [
      "derivative",
      "simplifyCore"
    ]
  },
  {
    "name": "sort",
    "category": "Matrix",
    "syntax": [
      "sort(x)",
      "sort(x, compare)"
    ],
    "description": "Sort the items in a matrix. Compare can be a string \"asc\", \"desc\", \"natural\", or a custom sort function.",
    "examples": [
      "sort([5, 10, 1])",
      "sort([\"C\", \"B\", \"A\", \"D\"], \"natural\")",
      "sortByLength(a, b) = size(a)[1] - size(b)[1]",
      "sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)",
      "sort([\"10\", \"1\", \"2\"], \"natural\")"
    ],
    "seealso": [
      "map",
      "filter",
      "forEach"
    ]
  },
  {
    "name": "sparse",
    "category": "Construction",
    "syntax": [
      "sparse()",
      "sparse([a1, b1, ...; a1, b2, ...])",
      "sparse([a1, b1, ...; a1, b2, ...], \"number\")"
    ],
    "description": "Create a sparse matrix.",
    "examples": [
      "sparse()",
      "sparse([3, 4; 5, 6])",
      "sparse([3, 0; 5, 0], \"number\")"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "index",
      "number",
      "string",
      "unit",
      "matrix"
    ]
  },
  {
    "name": "splitUnit",
    "category": "Construction",
    "syntax": [
      "splitUnit(unit: Unit, parts: Unit[])"
    ],
    "description": "Split a unit in an array of units whose sum is equal to the original unit.",
    "examples": [
      "splitUnit(1 m, [\"feet\", \"inch\"])"
    ],
    "seealso": [
      "unit",
      "createUnit"
    ]
  },
  {
    "name": "sqrt",
    "category": "Arithmetic",
    "syntax": [
      "sqrt(x)"
    ],
    "description": "Compute the square root value. If x = y * y, then y is the square root of x.",
    "examples": [
      "sqrt(25)",
      "5 * 5",
      "sqrt(-1)"
    ],
    "seealso": [
      "square",
      "sqrtm",
      "multiply",
      "nthRoot",
      "nthRoots",
      "pow"
    ]
  },
  {
    "name": "sqrtm",
    "category": "Arithmetic",
    "syntax": [
      "sqrtm(x)"
    ],
    "description": "Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",
    "examples": [
      "sqrtm([[33, 24], [48, 57]])"
    ],
    "seealso": [
      "sqrt",
      "abs",
      "square",
      "multiply"
    ]
  },
  {
    "name": "square",
    "category": "Arithmetic",
    "syntax": [
      "square(x)"
    ],
    "description": "Compute the square of a value. The square of x is x * x.",
    "examples": [
      "square(3)",
      "sqrt(9)",
      "3^2",
      "3 * 3"
    ],
    "seealso": [
      "multiply",
      "pow",
      "sqrt",
      "cube"
    ]
  },
  {
    "name": "squeeze",
    "category": "Matrix",
    "syntax": [
      "squeeze(x)"
    ],
    "description": "Remove inner and outer singleton dimensions from a matrix.",
    "examples": [
      "a = zeros(3,2,1)",
      "size(squeeze(a))",
      "b = zeros(1,1,3)",
      "size(squeeze(b))"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "subset",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "std",
    "category": "Statistics",
    "syntax": [
      "std(a, b, c, ...)",
      "std(A)",
      "std(A, dimension)",
      "std(A, normalization)",
      "std(A, dimension, normalization)"
    ],
    "description": "Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".",
    "examples": [
      "std(2, 4, 6)",
      "std([2, 4, 6, 8])",
      "std([2, 4, 6, 8], \"uncorrected\")",
      "std([2, 4, 6, 8], \"biased\")",
      "std([1, 2, 3; 4, 5, 6])"
    ],
    "seealso": [
      "max",
      "mean",
      "min",
      "median",
      "prod",
      "sum",
      "variance"
    ]
  },
  {
    "name": "stirlingS2",
    "category": "Combinatorics",
    "syntax": [
      "stirlingS2(n, k)"
    ],
    "description": "he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",
    "examples": [
      "stirlingS2(5, 3)"
    ],
    "seealso": [
      "bellNumbers"
    ]
  },
  {
    "name": "string",
    "category": "Construction",
    "syntax": [
      "\"text\"",
      "string(x)"
    ],
    "description": "Create a string or convert a value to a string",
    "examples": [
      "\"Hello World!\"",
      "string(4.2)",
      "string(3 + 2i)"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "index",
      "matrix",
      "number",
      "unit"
    ]
  },
  {
    "name": "subset",
    "category": "Matrix",
    "syntax": [
      "value(index)",
      "value(index) = replacement",
      "subset(value, [index])",
      "subset(value, [index], replacement)"
    ],
    "description": "Get or set a subset of the entries of a matrix or characters of a string. Indexes are one-based. There should be one index specification for each dimension of the target. Each specification can be a single index, a list of indices, or a range in colon notation `l:u`. In a range, both the lower bound l and upper bound u are included; and if a bound is omitted it defaults to the most extreme valid value. The cartesian product of the indices specified in each dimension determines the target of the operation.",
    "examples": [
      "d = [1, 2; 3, 4]",
      "e = []",
      "e[1, 1:2] = [5, 6]",
      "e[2, :] = [7, 8]",
      "f = d * e",
      "f[2, 1]",
      "f[:, 1]",
      "f[[1,2], [1,3]] = [9, 10; 11, 12]",
      "f"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "trace",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "subtract",
    "category": "Operators",
    "syntax": [
      "x - y",
      "subtract(x, y)"
    ],
    "description": "subtract two values.",
    "examples": [
      "a = 5.3 - 2",
      "a + 2",
      "2/3 - 1/6",
      "2 * 3 - 3",
      "2.1 km - 500m"
    ],
    "seealso": [
      "add"
    ]
  },
  {
    "name": "sum",
    "category": "Statistics",
    "syntax": [
      "sum(a, b, c, ...)",
      "sum(A)",
      "sum(A, dimension)"
    ],
    "description": "Compute the sum of all values.",
    "examples": [
      "sum(2, 3, 4, 1)",
      "sum([2, 3, 4, 1])",
      "sum([2, 5; 4, 3])"
    ],
    "seealso": [
      "max",
      "mean",
      "median",
      "min",
      "prod",
      "std",
      "sum",
      "variance"
    ]
  },
  {
    "name": "sylvester",
    "category": "Algebra",
    "syntax": [
      "sylvester(A,B,C)"
    ],
    "description": "Solves the real-valued Sylvester equation AX+XB=C for X",
    "examples": [
      "sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])",
      "A = [[-1, -2], [1, 1]]; B = [[2, -1], [1, -2]]; C = [[-3, 2], [3, 0]]",
      "sylvester(A, B, C)"
    ],
    "seealso": [
      "schur",
      "lyap"
    ]
  },
  {
    "name": "tan",
    "category": "Trigonometry",
    "syntax": [
      "tan(x)"
    ],
    "description": "Compute the tangent of x in radians.",
    "examples": [
      "tan(0.5)",
      "sin(0.5) / cos(0.5)",
      "tan(pi / 4)",
      "tan(45 deg)"
    ],
    "seealso": [
      "atan",
      "sin",
      "cos"
    ]
  },
  {
    "name": "tanh",
    "category": "Trigonometry",
    "syntax": [
      "tanh(x)"
    ],
    "description": "Compute the hyperbolic tangent of x in radians.",
    "examples": [
      "tanh(0.5)",
      "sinh(0.5) / cosh(0.5)"
    ],
    "seealso": [
      "sinh",
      "cosh"
    ]
  },
  {
    "name": "to",
    "category": "Units",
    "syntax": [
      "x to unit",
      "to(x, unit)"
    ],
    "description": "Change the unit of a value.",
    "examples": [
      "5 inch to cm",
      "3.2kg to g",
      "16 bytes in bits"
    ],
    "seealso": []
  },
  {
    "name": "trace",
    "category": "Matrix",
    "syntax": [
      "trace(A)"
    ],
    "description": "Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",
    "examples": [
      "A = [1, 2, 3; -1, 2, 3; 2, 0, 3]",
      "trace(A)"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "transpose",
      "zeros"
    ]
  },
  {
    "name": "transpose",
    "category": "Matrix",
    "syntax": [
      "x'",
      "transpose(x)"
    ],
    "description": "Transpose a matrix",
    "examples": [
      "a = [1, 2, 3; 4, 5, 6]",
      "a'",
      "transpose(a)"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "zeros"
    ]
  },
  {
    "name": "typeOf",
    "category": "Utils",
    "syntax": [
      "typeOf(x)"
    ],
    "description": "Get the type of a variable.",
    "examples": [
      "typeOf(3.5)",
      "typeOf(2 - 4i)",
      "typeOf(45 deg)",
      "typeOf(\"hello world\")"
    ],
    "seealso": [
      "getMatrixDataType"
    ]
  },
  {
    "name": "unaryMinus",
    "category": "Operators",
    "syntax": [
      "-x",
      "unaryMinus(x)"
    ],
    "description": "Inverse the sign of a value. Converts booleans and strings to numbers.",
    "examples": [
      "-4.5",
      "-(-5.6)",
      "-\"22\""
    ],
    "seealso": [
      "add",
      "subtract",
      "unaryPlus"
    ]
  },
  {
    "name": "unaryPlus",
    "category": "Operators",
    "syntax": [
      "+x",
      "unaryPlus(x)"
    ],
    "description": "Converts booleans and strings to numbers.",
    "examples": [
      "+true",
      "+\"2\""
    ],
    "seealso": [
      "add",
      "subtract",
      "unaryMinus"
    ]
  },
  {
    "name": "unequal",
    "category": "Relational",
    "syntax": [
      "x != y",
      "unequal(x, y)"
    ],
    "description": "Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",
    "examples": [
      "2+2 != 3",
      "2+2 != 4",
      "a = 3.2",
      "b = 6-2.8",
      "a != b",
      "50cm != 0.5m",
      "5 cm != 2 inch"
    ],
    "seealso": [
      "equal",
      "smaller",
      "larger",
      "smallerEq",
      "largerEq",
      "compare",
      "deepEqual"
    ]
  },
  {
    "name": "unit",
    "category": "Construction",
    "syntax": [
      "value unit",
      "unit(value, unit)",
      "unit(string)"
    ],
    "description": "Create a unit.",
    "examples": [
      "5.5 mm",
      "3 inch",
      "unit(7.1, \"kilogram\")",
      "unit(\"23 deg\")"
    ],
    "seealso": [
      "bignumber",
      "boolean",
      "complex",
      "index",
      "matrix",
      "number",
      "string"
    ]
  },
  {
    "name": "usolve",
    "category": "Algebra",
    "syntax": [
      "x=usolve(U, b)"
    ],
    "description": "Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
    "examples": [
      "x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"
    ],
    "seealso": [
      "usolveAll",
      "lup",
      "lusolve",
      "lsolve",
      "matrix",
      "sparse"
    ]
  },
  {
    "name": "usolveAll",
    "category": "Algebra",
    "syntax": [
      "x=usolve(U, b)"
    ],
    "description": "Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
    "examples": [
      "x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"
    ],
    "seealso": [
      "usolve",
      "lup",
      "lusolve",
      "lsolve",
      "matrix",
      "sparse"
    ]
  },
  {
    "name": "variance",
    "category": "Statistics",
    "syntax": [
      "variance(a, b, c, ...)",
      "variance(A)",
      "variance(A, dimension)",
      "variance(A, normalization)",
      "variance(A, dimension, normalization)"
    ],
    "description": "Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".",
    "examples": [
      "variance(2, 4, 6)",
      "variance([2, 4, 6, 8])",
      "variance([2, 4, 6, 8], \"uncorrected\")",
      "variance([2, 4, 6, 8], \"biased\")",
      "variance([1, 2, 3; 4, 5, 6])"
    ],
    "seealso": [
      "max",
      "mean",
      "min",
      "median",
      "min",
      "prod",
      "std",
      "sum"
    ]
  },
  {
    "name": "xgcd",
    "category": "Arithmetic",
    "syntax": [
      "xgcd(a, b)"
    ],
    "description": "Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",
    "examples": [
      "xgcd(8, 12)",
      "gcd(8, 12)",
      "xgcd(36163, 21199)"
    ],
    "seealso": [
      "gcd",
      "lcm"
    ]
  },
  {
    "name": "xor",
    "category": "Logical",
    "syntax": [
      "x xor y",
      "xor(x, y)"
    ],
    "description": "Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",
    "examples": [
      "true xor false",
      "false xor false",
      "true xor true",
      "0 xor 4"
    ],
    "seealso": [
      "not",
      "and",
      "or"
    ]
  },
  {
    "name": "zeros",
    "category": "Matrix",
    "syntax": [
      "zeros(m)",
      "zeros(m, n)",
      "zeros(m, n, p, ...)",
      "zeros([m])",
      "zeros([m, n])",
      "zeros([m, n, p, ...])"
    ],
    "description": "Create a matrix containing zeros.",
    "examples": [
      "zeros(3)",
      "zeros(3, 5)",
      "a = [1, 2, 3; 4, 5, 6]",
      "zeros(size(a))"
    ],
    "seealso": [
      "concat",
      "det",
      "diag",
      "identity",
      "inv",
      "ones",
      "range",
      "size",
      "squeeze",
      "subset",
      "trace",
      "transpose"
    ]
  },
  {
    "name": "zpk2tf",
    "category": "Signal",
    "syntax": [
      "zpk2tf(z, p, k)"
    ],
    "description": "Compute the transfer function of a zero-pole-gain model.",
    "examples": [
      "zpk2tf([1, 2], [-1, -2], 1)",
      "zpk2tf([1, 2], [-1, -2])",
      "zpk2tf([1 - 3i, 2 + 2i], [-1, -2])"
    ],
    "seealso": []
  },
  {
    "name": "derivative",
    "category": "Algebra",
    "syntax": [
      "derivative(expr, variable)",
      "derivative(expr, variable, {simplify: boolean})"
    ],
    "description": "Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",
    "examples": [
      "derivative(\"2x^3\", \"x\")",
      "derivative(\"2x^3\", \"x\", {simplify: false})",
      "derivative(\"2x^2 + 3x + 4\", \"x\")",
      "derivative(\"sin(2x)\", \"x\")",
      "f = parse(\"x^2 + x\")",
      "x = parse(\"x\")",
      "df = derivative(f, x)",
      "df.evaluate({x: 3})"
    ],
    "seealso": [
      "simplify",
      "parse",
      "evaluate"
    ]
  },
  {
    "name": "evaluate",
    "category": "Expression",
    "syntax": [
      "evaluate(expression)",
      "evaluate(expression, scope)",
      "evaluate([expr1, expr2, expr3, ...])",
      "evaluate([expr1, expr2, expr3, ...], scope)"
    ],
    "description": "Evaluate an expression or an array with expressions.",
    "examples": [
      "evaluate(\"2 + 3\")",
      "evaluate(\"sqrt(16)\")",
      "evaluate(\"2 inch to cm\")",
      "evaluate(\"sin(x * pi)\", { \"x\": 1/2 })",
      "evaluate([\"width=2\", \"height=4\",\"width*height\"])"
    ],
    "seealso": []
  },
  {
    "name": "help",
    "category": "Expression",
    "syntax": [
      "help(object)",
      "help(string)"
    ],
    "description": "Display documentation on a function or data type.",
    "examples": [
      "help(sqrt)",
      "help(\"complex\")"
    ],
    "seealso": []
  },
  {
    "name": "leafCount",
    "category": "Algebra",
    "syntax": [
      "leafCount(expr)"
    ],
    "description": "Computes the number of leaves in the parse tree of the given expression",
    "examples": [
      "leafCount(\"e^(i*pi)-1\")",
      "leafCount(parse(\"{a: 22/7, b: 10^(1/2)}\"))"
    ],
    "seealso": [
      "simplify"
    ]
  },
  {
    "name": "rationalize",
    "category": "Algebra",
    "syntax": [
      "rationalize(expr)",
      "rationalize(expr, scope)",
      "rationalize(expr, scope, detailed)"
    ],
    "description": "Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",
    "examples": [
      "rationalize(\"2x/y - y/(x+1)\")",
      "rationalize(\"2x/y - y/(x+1)\", true)"
    ],
    "seealso": [
      "simplify"
    ]
  },
  {
    "name": "resolve",
    "category": "Algebra",
    "syntax": [
      "resolve(node, scope)"
    ],
    "description": "Recursively substitute variables in an expression tree.",
    "examples": [
      "resolve(parse(\"1 + x\"), { x: 7 })",
      "resolve(parse(\"size(text)\"), { text: \"Hello World\" })",
      "resolve(parse(\"x + y\"), { x: parse(\"3z\") })",
      "resolve(parse(\"3x\"), { x: parse(\"y+z\"), z: parse(\"w^y\") })"
    ],
    "seealso": [
      "simplify",
      "evaluate"
    ],
    "mayThrow": [
      "ReferenceError"
    ]
  },
  {
    "name": "simplify",
    "category": "Algebra",
    "syntax": [
      "simplify(expr)",
      "simplify(expr, rules)"
    ],
    "description": "Simplify an expression tree.",
    "examples": [
      "simplify(\"3 + 2 / 4\")",
      "simplify(\"2x + x\")",
      "f = parse(\"x * (x + 2 + x)\")",
      "simplified = simplify(f)",
      "simplified.evaluate({x: 2})"
    ],
    "seealso": [
      "simplifyCore",
      "derivative",
      "evaluate",
      "parse",
      "rationalize",
      "resolve"
    ]
  },
  {
    "name": "simplifyConstant",
    "category": "Algebra",
    "syntax": [
      "simplifyConstant(expr)",
      "simplifyConstant(expr, options)"
    ],
    "description": "Replace constant subexpressions of node with their values.",
    "examples": [
      "simplifyConstant(\"(3-3)*x\")",
      "simplifyConstant(parse(\"z-cos(tau/8)\"))"
    ],
    "seealso": [
      "simplify",
      "simplifyCore",
      "evaluate"
    ]
  },
  {
    "name": "simplifyCore",
    "category": "Algebra",
    "syntax": [
      "simplifyCore(node)"
    ],
    "description": "Perform simple one-pass simplifications on an expression tree.",
    "examples": [
      "simplifyCore(parse(\"0*x\"))",
      "simplifyCore(parse(\"(x+0)*2\"))"
    ],
    "seealso": [
      "simplify",
      "simplifyConstant",
      "evaluate"
    ]
  },
  {
    "name": "symbolicEqual",
    "category": "Algebra",
    "syntax": [
      "symbolicEqual(expr1, expr2)",
      "symbolicEqual(expr1, expr2, options)"
    ],
    "description": "Returns true if the difference of the expressions simplifies to 0",
    "examples": [
      "symbolicEqual(\"x*y\",\"y*x\")",
      "symbolicEqual(\"abs(x^2)\", \"x^2\")",
      "symbolicEqual(\"abs(x)\", \"x\", {context: {abs: {trivial: true}}})"
    ],
    "seealso": [
      "simplify",
      "evaluate"
    ]
  }
]